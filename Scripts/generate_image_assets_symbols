#!/usr/bin/env ruby

require "time"
require "fileutils"
require "digest/md5"

if ARGV.length < 2
  puts "Too few arguments, usage: generate_image_assets_sympols path output_filename [public]"
  exit
end

path = ARGV[0]
output_filename = ARGV[1]
assets_access_modifier_arg = ARGV[2] || ""
access_modifier = assets_access_modifier_arg == "public" ? "public " : ""

input = ["#{path}/Sources/Resources/Icons.xcassets", "#{path}/Sources/Resources/Assets.xcassets"]

output_path = File.join(path,  "Sources", "Resources")

temp_path = "/tmp/"

asset_folders = input.map do |name|
  unless File.extname(name) == ".xcassets"
    $stderr.puts "Only .xcassets bundles are supported"
  end
  name
end

names  = []
asset_folders.each do |folder|
  names += Dir.glob(File.join(folder, "/**/*.imageset")).map { |f| File.basename(f, File.extname(f)) }
end

names = names.sort

if names.length < 1
  exit
end

prelude = "//\n"
prelude << "//  Copyright Â© FINN.no AS, Inc. All rights reserved.\n"
prelude << "//\n"
prelude << "\n"
prelude << "// Generated by #{File.basename(__FILE__)} as a \"Run Script\" Build Phase\n"
prelude << "// WARNING: This file is autogenerated, do not modify by hand\n\n"

# swift

File.open(File.join(temp_path, "#{output_filename}.swift"), "w") do |f|
  f.puts prelude
  f.puts <<EOS
import UIKit

private class BundleHelper {
}

#{access_modifier}extension UIImage {
    convenience init(named imageAsset: #{output_filename}) {
        self.init(named: imageAsset.rawValue, in: Bundle(for: BundleHelper.self), compatibleWith: nil)!
    }

    @objc class func assetNamed(_ assetName: String) -> UIImage {
        return UIImage(named: assetName, in: Bundle(for: BundleHelper.self), compatibleWith: nil)!
    }
}

//swiftlint:disable type_body_length
#{access_modifier}enum #{output_filename}: String {
EOS
  names.each do |name|
    casename = name.dup
    casename[0] = casename[0].downcase
    if name == casename
      f.puts "    case #{casename}\n"
    else
      f.puts "    case #{casename} = \"#{name}\"\n"
    end
  end

  f.puts "\n    #{access_modifier}static var imageNames: [#{output_filename}] {\n"
  f.puts "        return [\n"
  names.each do |name|
    casename = name.dup
    casename[0] = casename[0].downcase
    f.puts "            .#{casename},\n"
  end
  f.puts "    ]\n"
  f.puts "  }\n"

  f.puts "}"
end

swiftNewDigest = Digest::MD5.hexdigest(File.read(File.join(temp_path, "#{output_filename}.swift")))
swiftOldDigest = Digest::MD5.hexdigest(File.read(File.join(output_path, "#{output_filename}.swift")))

objcNewDigest = Digest::MD5.hexdigest(File.read(File.join(temp_path, "#{output_filename}.m")))
objcOldDigest = Digest::MD5.hexdigest(File.read(File.join(output_path, "#{output_filename}.m")))

objcHeaderNewDigest = Digest::MD5.hexdigest(File.read(File.join(temp_path, "#{output_filename}.h")))
objcHeaderOldDigest = Digest::MD5.hexdigest(File.read(File.join(output_path, "#{output_filename}.h")))

if swiftNewDigest.eql? swiftOldDigest and objcNewDigest.eql? objcOldDigest and objcHeaderNewDigest.eql? objcHeaderOldDigest
  # No files replaced
else
  FileUtils.cp_r(File.join(temp_path, "#{output_filename}.swift"), File.join(output_path, "#{output_filename}.swift"), { remove_destination: true })
end
